ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion < 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion")
ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion > 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion")
ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion < 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion")
res_freq_nula_consistente <- replicate(
10000,
distribucion_frecuencia_nula(h3_dataset_SinOutliers %>% filter(error_selfperception == F & error_otherperception == F))
)
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion")
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F & error_otherperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion")
ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion < 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion")
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion")
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F & error_otherperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion")
ggarrange(
ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion < 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F & error_otherperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
labels = LETTERS[1:3]
)
ggarrange(
ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion < 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F & error_otherperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
labels = LETTERS[1:3], ncol = 1
)
ggarrange(
ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion < 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F & error_otherperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
labels = LETTERS[1:3], ncol = 1
)
ggsave('null_dist_freq.png', height = 10)
ggarrange(
ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion < 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F & error_otherperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
labels = LETTERS[1:3], ncol = 1
)
ggsave('null_dist_freq.png')
ggarrange(
ggplot() +
geom_histogram(aes(x = res_freq_nula_all), color = 'black', fill = 'lightblue') +
geom_vline(aes(xintercept = mean(h3_dataset_SinOutliers$autopercepcion < 0)), color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
ggplot() +
geom_histogram(aes(x = res_freq_nula_self), color = 'black', fill = 'lightblue') +
geom_vline(
aes(
xintercept = mean(h3_dataset_SinOutliers %>% filter(error_selfperception == F & error_otherperception == F) %>% pull(autopercepcion) < 0)
),
color = 'red', linetype = 'dashed') +
theme_classic() + ylab("Frecuencia") + xlab("Frecuencia de subestimacion"),
labels = LETTERS[1:3], ncol = 1
)
ggsave('null_dist_freq.png', height = 5)
gc()
library(tidyverse)
load("../../Pre-procesamiento/dataset_final.rda")
spam <- final_dataset %>%
select(A1:P3) %>%
drop_na()
spam_filtrado <- final_dataset %>%
filter(error_otherperception == F & error_selfperception == F) %>%
select(A1:P3) %>%
drop_na()
library(Gifi)
spam_ordinal <- spam_filtrado %>% mutate(
across(.fns = ~factor(.x, levels = 0:5))
) %>% as.data.frame()
captca <- princals(spam_ordinal)
captca$evals
plot(captca, plot.type = "transplot")
plot(captca, "loadplot", main = "Loadings Uso Activo y Pasivo")
spam_ordinal <- spam %>% mutate(
across(.fns = ~factor(.x, levels = 0:5))
) %>% as.data.frame()
captca <- princals(spam_ordinal)
captca$evals
plot(captca, "loadplot", main = "Loadings Uso Activo y Pasivo")
plot(captca, "screeplot")
plot(captca$objectscores, xlab = "dim1", ylab = "dim2", col = "RED", cex = .5)
poly_pca <- principal(spam_filtrado, 7, rotate = 'none', cor = 'poly')
library(Hmisc)
library(tidyverse)
library(GGally)
library(boot)
library(psych)
library(ggridges)
distribucion_todos <- spam %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(bandwidth = 0.7
) +
xlab('Respuesta') + ylab('Variable')
distribucion_todos
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(bandwidth = 0.7
) +
xlab('Respuesta') + ylab('Variable')
distribucion_filtrado
distribucion_todos <- spam %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(bandwidth = 0.7
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_todos
distribucion_todos <- spam %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(bandwidth = 0.7, fill = 'lighblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_todos
distribucion_todos <- spam %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(bandwidth = 0.7, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_todos
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(bandwidth = 0.7, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
ggpubr::ggarrange(distribucion_todos, distribucion_filtrado, nrow = 1, ncol = 2, labels = c('A','B'))
resumen_actividad_todos <- spam %>%
rowwise() %>%
transmute(
media_activo = mean(
c(A1,A2,A3,A4)
),
media_pasivo = mean(
c(P1,P2,P3)
),
mediana_activo = median(
c(A1,A2,A3,A4)
),
mediana_pasivo = median(
c(P1,P2,P3)
)
)
resumen_actividad_filtrado <- spam_filtrado %>%
rowwise() %>%
transmute(
media_activo = mean(
c(A1,A2,A3,A4)
),
media_pasivo = mean(
c(P1,P2,P3)
),
mediana_activo = median(
c(A1,A2,A3,A4)
),
mediana_pasivo = median(
c(P1,P2,P3)
)
)
ggplot(
resumen_actividad,
aes(x = media_activo, y = media_pasivo)
) +
geom_jitter(width = 0.025) +
geom_smooth(se = F, linetype = 'dashed') + geom_smooth(method = 'lm', color = 'red', se = F) +
theme_classic()
resumen_actividad_todos <- spam %>%
rowwise() %>%
transmute(
media_activo = mean(
c(A1,A2,A3,A4)
),
media_pasivo = mean(
c(P1,P2,P3)
),
mediana_activo = median(
c(A1,A2,A3,A4)
),
mediana_pasivo = median(
c(P1,P2,P3)
)
)
resumen_actividad_filtrado <- spam_filtrado %>%
rowwise() %>%
transmute(
media_activo = mean(
c(A1,A2,A3,A4)
),
media_pasivo = mean(
c(P1,P2,P3)
),
mediana_activo = median(
c(A1,A2,A3,A4)
),
mediana_pasivo = median(
c(P1,P2,P3)
)
)
ggplot(
resumen_actividad_todos,
aes(x = media_activo, y = media_pasivo)
) +
geom_jitter(width = 0.025) +
geom_smooth(se = F, linetype = 'dashed') + geom_smooth(method = 'lm', color = 'red', se = F) +
theme_classic()
ggplot(
resumen_actividad_filtrado,
aes(x = media_activo, y = media_pasivo)
) +
geom_jitter(width = 0.025) +
geom_smooth(se = F, linetype = 'dashed') + geom_smooth(method = 'lm', color = 'red', se = F) +
theme_classic()
library(lavaan)
cfa_ActivoPasivo <- '
cfa_model <- cfa(cfa_formula, data = spam, mimic =c("MPlus"), std.lv = TRUE, ordered = TRUE)
cfa_ActivoPasivo <- '
activo =~ A1 + A2 + A3 + A4
pasivo =~ P1 + P2 + P3'
cfa_model <- cfa(cfa_formula, data = spam, mimic =c("MPlus"), std.lv = TRUE, ordered = TRUE)
cfa_model <- cfa(cfa_ActivoPasivo, data = spam, mimic =c("MPlus"), std.lv = TRUE, ordered = TRUE)
performance::check_model(cfa_model)
performance::model_performance(cfa_model)
cfa_model
cfa_ActivoPasivo <- "activo =~ A1 + A2 + A3 + A4
pasivo =~ P1 + P2 + P3"
cfa_model <- cfa(cfa_ActivoPasivo, data = spam, ordered = TRUE)
performance::model_performance(cfa_model)
cfa_model <- cfa(cfa_ActivoPasivo, data = spam)
performance::model_performance(cfa_model)
cfa_model <- cfa(cfa_ActivoPasivo, data = spam, mimic =c("MPlus"), std.lv = TRUE, ordered = TRUE)
performance::model_performance(cfa(cfa_ActivoPasivo, data = spam))
performance::model_performance(cfa(cfa_ActivoPasivo, data = spam_filtrado))
spam_fi
performance::model_performance(cfa(cfa_ActivoPasivo, data = spam_filtrado))
performance::model_performance(cfa(cfa_ActivoPasivo, data = spam_filtrado, ordered = T))
?cfa
performance::model_performance(cfa(cfa_ActivoPasivo, data = spam_filtrado))
ggsave('uso_dist.png')
ggpubr::ggarrange(distribucion_todos, distribucion_filtrado, nrow = 1, ncol = 2, labels = c('A','B'))
ggsave('uso_dist.png')
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", bins = 20, scale = 0.95, draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", scale = 0.95, draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", bins = 5, draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", bins = 5, draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", bins = 7, draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", bins = 6, draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", bins = 6, scale = 0.95, draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(stat = "binline", bins = 6, scale = 0.95, draw_baseline = FALSE, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
distribucion_filtrado <- spam_filtrado %>% pivot_longer(cols = everything(), names_to = 'Var', values_to = 'Res') %>%
ggplot(
aes(x = Res, y = Var, fill = Res)
) +
geom_density_ridges(bandwidth = 0.7, fill = 'lightblue'
) +
xlab('Respuesta') + ylab('Variable') +
theme_classic()
distribucion_filtrado
ggpubr::ggarrange(distribucion_todos, distribucion_filtrado, nrow = 1, ncol = 2, labels = c('A','B'))
ggsave('uso_dist.png')
scatter_all <- ggplot(
resumen_actividad_todos,
aes(x = media_activo, y = media_pasivo)
) +
geom_jitter(width = 0.025) +
geom_smooth(se = F, linetype = 'dashed') + geom_smooth(method = 'lm', color = 'red', se = F) +
theme_classic()
scatter_all
scatter_consistent <- ggplot(
resumen_actividad_filtrado,
aes(x = media_activo, y = media_pasivo)
) +
geom_jitter(width = 0.025) +
geom_smooth(se = F, linetype = 'dashed') + geom_smooth(method = 'lm', color = 'red', se = F) +
theme_classic()
scatter_consistent
ggpubr::ggarrange(
scatter_all, scatter_consistent
)
scatter_consistent <- ggplot(
resumen_actividad_filtrado,
aes(x = media_activo, y = media_pasivo)
) +
geom_jitter(width = 0.025) +
geom_smooth(se = F, linetype = 'dashed') + geom_smooth(method = 'lm', color = 'red', se = F) +
theme_classic() + xlab("Media de uso activo") + ylab("Media de uso pasivo")
scatter_consistent
scatter_all <- ggplot(
resumen_actividad_todos,
aes(x = media_activo, y = media_pasivo)
) +
geom_jitter(width = 0.025) +
geom_smooth(se = F, linetype = 'dashed') + geom_smooth(method = 'lm', color = 'red', se = F) +
theme_classic() + xlab("Media de uso activo") + ylab("Media de uso pasivo")
scatter_all
ggpubr::ggarrange(
scatter_all, scatter_consistent
)
ggpubr::ggarrange(
scatter_all, scatter_consistent
)
ggsave("scatter_uso.png")
fitMeasures(cfa_model)
